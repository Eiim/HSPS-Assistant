// places in this file that you should customise:
// add your mod info to version, group, archivesBaseName
// add your mod's root source folder to minecraft.runs.client.mod, minecraft.runs.server.mod, minecraft.runs.data.mod 
// add your mod's info to jar.manifest.attributes (optional)
// if you're updating the forge version:
//  Easiest way is to download the new forge mdk, decompress it, then look in the build.gradle file to copy the settings for
// minecraft mappings channel, and dependencies.minecraft

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.6', changing: false
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "0.3.2"
group = "io.github.eiim"
archivesBaseName = "hspsassistant"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
//java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.20'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            // Enable devauth for easier testing
            property 'devauth.enabled', 'true'
            property 'devauth.account', 'main' // You may need to override when setting up DevAuth, see https://github.com/DJtheRedstoner/DevAuth

            mods {
                hspsassistant {
                    source sourceSets.main
                }
            }
        }
			
		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				hspsassistant {
					source sourceSets.main
				}
			}
		}

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'hspsassistant', '--all', '--output', file('src/generated/resources/')

            mods {
                hspsassistant {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20-46.0.10'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

	implementation("me.djtheredstoner:DevAuth-forge-latest:1.1.2")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "hspsassistant",
            "Specification-Vendor": "eiim",
            "Specification-Version": "1", // The version number of the specification, not the version of the mod
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",  // the version number of the mod.  copy the version from earlier in this file
            "Implementation-Vendor" :"eiim",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}